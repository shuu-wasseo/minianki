#!/usr/bin/python3

import minianki
import requests
import sys
import time
import datetime

deck = []

def compare_verno(vn1, vn2):
    vnone = vn1.split("-")[0]
    vntwo = vn2.split("-")[0]
    one = vnone.split(".")
    two = vntwo.split(".")
    for x in range(3):
        if one[x] > two[x]:
            return vnone
        if two[x] > one[x]:
            return vntwo
        if x == 2 and one[x] == two[x]:
            return vnone

github_verno = requests.get("https://api.github.com/repos/shuu-wasseo/minianki/releases/latest").json()["name"][1:]
new_release_date = requests.get("https://api.github.com/repos/shuu-wasseo/minianki/releases/latest").json()["created_at"]
    
def help():
    string = ("\n    you are using minianki v" + minianki.verno + ".")
    if compare_verno(github_verno, minianki.verno) != minianki.verno:
        if (datetime.datetime.fromisoformat(new_release_date).date() - datetime.datetime.today().date()).days <= 14:
            string = string + (f"    a new version of minianki ({github_verno}) was released not too long ago on {datetime.datetime.fromisoformat(new_release_date).date()}! if you would like to update, please use the 'update' command.")
        else:
            string = string + (f"    note: your version of minianki (v{minianki.verno}) is outdated. if you would like to update to the latest version (v{github_verno}), please use the 'update' command.")
    string = string + ("""\n
    list of commands:

    importing:
    - impt: import cards in import.txt to the main database.

    manage/use deck:
    - deck: see all your cards and edit, suspend or delete them.
    - learn: an anki-esque learning session.
    
    settings and help:
    - guide: see guides.
    - help: view all commands again.
    - settings: customise deck options.

    misc:
    - exit: leave minianki.
    - update: update and restart minianki.

    for support, please contact joshuasoh2008@gmail.com.\n""")
    return string
    
welc = """welcome to minianki! :> \n"""

if minianki.variables[13][1] == True:
    for ind in range(len(welc)):
        if ind < len(welc)-3:
            time.sleep(0.1)
        else:
            time.sleep(0.5)
        sys.stdout.write(welc[ind])
        sys.stdout.flush()
else:
    print(welc)
    
print(help())

minianki.init(deck)
minianki.save(deck)

# console-like env
while 1:
    command = input("__________\n>>> ")
    match command:
        case "impt":
            minianki.impt(deck)
        case "learn":
            minianki.learn(deck)
        case "deck":
            minianki.deck(deck)
        case "settings":
            minianki.settings()
        case "guide":
            minianki.guide()
        case "help":
            print(help)
        case "update":
            minianki.update()
        case "shua":
            print("    hewwo :>")
        case "kiki":
            print("    <3")
        case "":
            print("\n")
        case "exit":
            print("thanks for using minianki! bye!")
            break
        case "bye":
            print("see you soon! and thanks for using minianki!")
        case __:
            if command[0] == ":" and "q" in command:
                print("oh my GOD I KNEW IT I KNEW YOU WERE A VIM USER")
                print("but yes bye and thanks for using minianki!")
                break
            else:
                "invalid command. try again!"
    minianki.init(deck)
    minianki.save(deck)
